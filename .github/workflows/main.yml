name: Deploy Frontend to Server

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Create production environment file
      run: |
        cat > src/environments/environment.prod.ts << 'EOF'
        export const environment = {
          production: true,
          stage: 'production',
          apiUrl: '${{ secrets.FRONTEND_API_URL || 'https://api.bookingshub.es/api' }}',
          googleClientId: '${{ secrets.GOOGLE_CLIENT_ID || 'falta configurar' }}',
          googleMapsApiKey: '${{ secrets.GOOGLE_MAPS_API_KEY || 'falta configurar' }}',
          geocodeApiKey: '${{ secrets.GOOGLE_GEOCODE_API_KEY || 'falta configurar' }}',
          logLevel: 'error',
          sentryDsn: '',
          version: '1.0.0',
          enableMocks: false
        };
        EOF
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Build application
      run: |
        # Configurar variables de entorno para build
        export NODE_OPTIONS="--max-old-space-size=4096"
        export NG_CLI_ANALYTICS=false
        
        # Ejecutar build con configuración offline
        npm run build:prod
      
    - name: Debug - List build output
      run: |
        echo "Contenido del directorio raíz:"
        ls -la
        echo "Contenido del directorio dist:"
        if [ -d "dist" ]; then
          ls -la dist/
        else
          echo "Directorio dist no encontrado"
        fi
        
    - name: Create directories on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |          
          # Crear directorio de backups si no existe
          sudo mkdir -p /var/www/bookings-hub-frontend/backups
          
          # Hacer backup del directorio actual si existe
          if [ -d "/var/www/bookings-hub-frontend/current" ]; then
            sudo mv /var/www/bookings-hub-frontend/current /var/www/bookings-hub-frontend/backups/backup_$(date +%Y%m%d_%H%M%S)
          fi
          
          # Crear el directorio de destino con permisos correctos
          sudo mkdir -p /var/www/bookings-hub-frontend/current
          sudo chown -R $USER:$USER /var/www/bookings-hub-frontend/current
          sudo chmod -R 755 /var/www/bookings-hub-frontend/current
          
    - name: Upload files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        source: "dist/*"
        target: "/var/www/bookings-hub-frontend/current"
        strip_components: 1
        
    - name: Configure Nginx and finalize deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |          
          # Configurar permisos correctos para los archivos subidos
          echo "🔧 Configurando permisos..."
          sudo chown -R www-data:www-data /var/www/bookings-hub-frontend/current
          sudo chmod -R 644 /var/www/bookings-hub-frontend/current
          sudo find /var/www/bookings-hub-frontend/current -type d -exec chmod 755 {} \;
          
          # Verificar permisos específicos para archivos críticos
          sudo chmod 644 /var/www/bookings-hub-frontend/current/index.html
          sudo chmod 755 /var/www/bookings-hub-frontend/current
          
          # Verificar que los archivos son legibles por nginx
          echo "📋 Verificando permisos:"
          ls -la /var/www/bookings-hub-frontend/current/index.html
          ls -la /var/www/bookings-hub-frontend/current/ | head -5
          
          # Verificar que nginx puede leer el archivo
          sudo -u www-data test -r /var/www/bookings-hub-frontend/current/index.html && echo "✅ index.html es legible por www-data" || echo "❌ index.html no es legible por www-data"
          
          # Crear favicon.ico si no existe (para evitar errores 404)
          if [ ! -f "/var/www/bookings-hub-frontend/current/favicon.ico" ]; then
            if [ -f "/var/www/bookings-hub-frontend/current/assets/icon/favicon.png" ]; then
              sudo cp /var/www/bookings-hub-frontend/current/assets/icon/favicon.png /var/www/bookings-hub-frontend/current/favicon.ico
              sudo chown www-data:www-data /var/www/bookings-hub-frontend/current/favicon.ico
              sudo chmod 644 /var/www/bookings-hub-frontend/current/favicon.ico
              echo "✅ favicon.ico creado desde favicon.png"
            else
              echo "⚠️ favicon.ico no encontrado, los navegadores mostrarán un error 404 pero la app funcionará"
            fi
          fi
          
          # Verificar que Nginx esté funcionando
          if sudo systemctl is-active --quiet nginx; then
            echo "Nginx está ejecutándose"
            sudo systemctl reload nginx
          else
            echo "Iniciando Nginx..."
            sudo systemctl start nginx
            sudo systemctl enable nginx
          fi

          # Limpiar backups antiguos (mantener solo los últimos 5)
          cd /var/www/bookings-hub-frontend/backups
          if [ "$(ls -1 | wc -l)" -gt 5 ]; then
            sudo ls -1t | tail -n +6 | xargs -r sudo rm -rf
            echo "Backups antiguos limpiados"
          fi
          
          echo "✅ Frontend deployment completed successfully!"